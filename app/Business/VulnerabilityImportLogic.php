<?php

namespace App\Business;

use App\Messages\VulnerabilityImportMessage;
use App\Models\Asset;
use App\Models\Company;
use App\Models\Vulnerability;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class VulnerabilityImportLogic
{
    protected VulnerabilityImportMessage $message;

    function __construct(VulnerabilityImportMessage $message)
    {
        $this->message = $message;
    }

    public function importVulnerabilities(): void
    {
        $file = Storage::get($this->message->filePath);

        $company = Company::find($this->message->company_id);
        $defaultSystemGroup = $company->system_groups()->where('name', 'Default')->first();
        Log::info($defaultSystemGroup->name);
        $rows = array_map('str_getcsv', explode("\n", $file));
        $vulnerabilities = Vulnerability::all()->take(100000)->toArray();

        // Verarbeitung der Daten
        foreach ($rows as $key => $row) {
            // Debug
            if ($key > 1000) {
                break;
            }
            if ($key == 0) continue; // Überschrift überspringen

            // Validate if row has enough columns(12)
            if (count($row) < 12) continue;

            Log::info($row[0]);

            $computerName = $row[0];
            $computerId = $row[1];
            $operatingSystem = $row[2];
            $cve_id = $row[3];

            $asset = Asset::where('unique_id', $computerId)->first();

            if ($asset == null) {
                $asset = Asset::create([
                    'fqdn' => $computerName,
                    'unique_id' => $computerId,
                    'operating_system' => $operatingSystem,
                ]);
                $defaultSystemGroup->assets()->attach($asset->id);
            }


            $vulnerabilityIndex = array_search($cve_id, array_column($vulnerabilities, 'cve_id'));

            if ($vulnerabilityIndex == null) {
                continue;
            }
            $vulnerability = $vulnerabilities[$vulnerabilityIndex];

            $asset->vulnerabilities()->attach($vulnerability['id'],  ['timestamp' => Carbon::now()]);
        }

        // Datei nach Verarbeitung löschen
        Storage::delete($this->message->filePath);
    }
}
