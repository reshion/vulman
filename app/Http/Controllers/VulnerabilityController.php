<?php

namespace App\Http\Controllers;

use App\Http\Requests\VulnerabilityStoreRequest;
use App\Http\Requests\VulnerabilityUpdateRequest;
use App\Http\Resources\AssetResource;
use App\Http\Resources\SystemGroupPagingResource;
use App\Http\Resources\SystemGroupResource;
use App\Http\Resources\VulnerabilityPagingResource;
use App\Http\Resources\VulnerabilityResource;
use App\Http\Responses\BaseSeverityCountResponse;
use App\Models\Asset;
use App\Models\Company;
use App\Models\SystemGroup;
use App\Models\Vulnerability;
use Illuminate\Contracts\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

/** 
 * @OAS\SecurityScheme(      
 *      securityScheme="sanctum",
 *      type="http",
 *      scheme="bearer"
 * )
 */
class VulnerabilityController extends Controller
{
    /**
     * @OA\Get(
     *     path="/api/vulnerabilities",
     *     operationId="listVulnerabilities",
     *     summary="Lists vulnerabilities",
     *     tags={"Vulnerabilities"},
     *     security={{"sanctum":{}}},
     *     @OA\Parameter(
     *         name="page",
     *         in="query",
     *         description="Page number",
     *         required=false,
     *         @OA\Schema(type="integer", default=1)
     *     ),
     *     @OA\Parameter(
     *         name="count",
     *         in="query",
     *         description="Number of items per page",
     *         required=false,
     *         @OA\Schema(type="integer", default=10)
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="OK",
     *         @OA\JsonContent(ref="#/components/schemas/VulnerabilityPagingResource")
     *     )
     * )
     */
    public function index(Request $request)
    {
        $count = $request->input('count', 10);
        $vulnerabilities = Vulnerability::paginate($count);
        return VulnerabilityResource::collection($vulnerabilities);
    }

    /**
     * @OA\Post(
     *     path="/api/vulnerabilities",
     *     operationId="storeVulnerability",
     *     tags={"Vulnerabilities"},
     *     security={{"sanctum":{}}},
     *     summary="Adds a new vulnerability",
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/VulnerabilityStoreRequest")
     *             
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="OK",
     *         @OA\JsonContent(ref="#/components/schemas/VulnerabilityResource")
     *     )
     * )
     */

    public function store(VulnerabilityStoreRequest $request)
    {
        $vulnerability = Vulnerability::create($request->all());
        return new VulnerabilityResource($vulnerability);
    }

    /**
     * @OA\Get(
     *      path="/api/vulnerabilities/{id}",
     *      tags={"Vulnerabilities"},
     *      operationId="showVulnerability",
     *      security={{"sanctum":{}}},
     *      summary="Get Vulnerability information",
     *      description="Returns Vulnerability data",
     *      @OA\Parameter(
     *          name="id",
     *          description="Vulnerability id",
     *          required=true,
     *          in="path",
     *          @OA\Schema(
     *              type="integer"
     *          )
     *      ),
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *          @OA\JsonContent(ref="#/components/schemas/VulnerabilityResource")
     *       )
     * )
     */
    public function show(Vulnerability $vulnerability)
    {
        return new VulnerabilityResource($vulnerability);
    }

    /**
     * @OA\Get(
     *      path="/api/vulnerabilities/base-severity/system-group/{systemGroupId}",
     *      tags={"Vulnerabilities"},
     *      operationId="getBaseSeverityBySystemGroup",
     *      security={{"sanctum":{}}},
     *      summary="Base severity count by system group",
     *      description="Get summery of base severity information by system group",
     *      @OA\Parameter(
     *          name="systemGroupId",
     *          description="System group id",
     *          required=true,
     *          in="path",
     *          @OA\Schema(
     *              type="integer"
     *          )
     *      ),
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *          @OA\JsonContent(ref="#/components/schemas/BaseSeverityCountResponse")
     *       )
     * )
     */
    public function getBaseSeverityBySystemGroup(Request $request)
    {
        $user = $request->user();
        $companyId = $user->company_id;


        $Vulnerabilities = Vulnerability::withWhereHas('assets', function ($query) use ($request) {
            $query->where('scan_import_job_id', function ($query) {
                $query->select(DB::raw('MAX(scan_import_job_id)'))->from('asset_vulnerabilities');
            });
            $query->whereHas('system_groups',  function ($query) use ($request) {
                $query->where('system_groups.id', '=', $request->systemGroupId);
            });
        });
        $vulnerabilities = $Vulnerabilities->select(DB::raw("jsonb_extract_path_text(cve_details ::jsonb, 'containers','cna','metrics','0','cvssV3_1','baseSeverity') as baseSeverity"));
        $vulnerabilities = $Vulnerabilities->get();
        $baseSeverity = new BaseSeverityCountResponse();
        foreach ($vulnerabilities as $vulnerability) {
            switch ($vulnerability->baseseverity) {
                case 'CRITICAL':
                    $baseSeverity->critical++;
                    break;
                case 'HIGH':
                    $baseSeverity->high++;
                    break;
                case 'MEDIUM':
                    $baseSeverity->medium++;
                    break;
                case 'LOW':
                    $baseSeverity->low++;
                    break;
            }
        }
        return response()->json($baseSeverity, 200);





        $Asset = Asset::whereHas('system_groups',  function ($query) use ($request) {
            $query->where('system_groups.id', '=', $request->systemGroupId);
        });

        // $Asset = Asset::whereHas('system_groups',  function ($query) use ($request) {
        //     $query->where('system_groups.company_id', '=', $request->user()->company_id);
        // });


        $Asset = Asset::whereHas('vulnerabilities', function ($query) use ($request) {
            $query->where('scan_import_job_id', function ($query) {
                $query->select(DB::raw('MAX(scan_import_job_id)'))->from('asset_vulnerabilities');
            });
            //$query->where('scan_import_job_id', '=', 5);
        });
        $Asset->withWhereHas('vulnerabilities', function ($query) use ($request) {

            $query
                ->whereJsonContains('cve_details->containers->cna->metrics', [['cvssV3_1' => ['baseSeverity' => 'CRITICAL']]])
                ->orWhereJsonContains('cve_details->containers->cna->metrics', [['cvssV3_1' => ['baseSeverity' => 'HIGH']]])
                ->orWhereJsonContains('cve_details->containers->cna->metrics', [['cvssV3_1' => ['baseSeverity' => 'MEDIUM']]])
                ->orWhereJsonContains('cve_details->containers->cna->metrics', [['cvssV3_1' => ['baseSeverity' => 'LOW']]])
                ->select(DB::raw("jsonb_extract_path_text(cve_details ::jsonb, 'containers','cna','metrics','0','cvssV3_1','baseSeverity') as baseSeverity"));;
        });
        $assets = $Asset->get();
        $baseSeverity = new BaseSeverityCountResponse();
        foreach ($assets as $asset) {
            foreach ($asset->vulnerabilities as $vulnerability) {
                switch ($vulnerability->baseseverity) {
                    case 'CRITICAL':
                        $baseSeverity->critical++;
                        break;
                    case 'HIGH':
                        $baseSeverity->high++;
                        break;
                    case 'MEDIUM':
                        $baseSeverity->medium++;
                        break;
                    case 'LOW':
                        $baseSeverity->low++;
                        break;
                }
            }
        }
        return response()->json($baseSeverity, 200);
    }

    /**
     * @OA\Get(
     *      path="/api/vulnerabilities/base-severity/asset/{assetId}",
     *      tags={"Vulnerabilities"},
     *      operationId="getBaseSeverityByAsset",
     *      security={{"sanctum":{}}},
     *      summary="Base severity count by asset",
     *      description="Get summery of base severity information by asset",
     *      @OA\Parameter(
     *          name="assetId",
     *          description="Asset id",
     *          required=true,
     *          in="path",
     *          @OA\Schema(
     *              type="integer"
     *          )
     *      ),
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *          @OA\JsonContent(ref="#/components/schemas/BaseSeverityCountResponse")
     *       )
     * )
     */
    public function getBaseSeverityByAsset(Request $request)
    {

        $Vulnerability = Vulnerability::withWhereHas('assets', function ($query) use ($request) {
            $query->where('asset_id', '=', $request->assetId);
            $query->where('scan_import_job_id', function ($query) {
                $query->select(DB::raw('MAX(scan_import_job_id)'))->from('asset_vulnerabilities');
            });
        });
        $Vulnerability->select(DB::raw("jsonb_extract_path_text(cve_details ::jsonb, 'containers','cna','metrics','0','cvssV3_1','baseSeverity') as baseSeverity"));
        $sql = $Vulnerability->toRawSql();



        $vulnerabilities = $Vulnerability->get();

        $baseSeverity = new BaseSeverityCountResponse();
        foreach ($vulnerabilities as $vulnerability) {
            switch ($vulnerability->baseseverity) {
                case 'CRITICAL':
                    $baseSeverity->critical++;
                    break;
                case 'HIGH':
                    $baseSeverity->high++;
                    break;
                case 'MEDIUM':
                    $baseSeverity->medium++;
                    break;
                case 'LOW':
                    $baseSeverity->low++;
                    break;
            }
        }
        return response()->json($baseSeverity, 200);
    }




    /**
     * @OA\Get(
     *      path="/api/vulnerabilities/company/asset-count/",
     *      tags={"Vulnerabilities"},
     *      operationId="getByCompanyWithAssetCount",
     *      security={{"sanctum":{}}},
     *      summary="Get vulerabilities by company",
     *      description="Get vulerabilities by company",
     *     @OA\Parameter(
     *         name="page",
     *         in="query",
     *         description="Page number",
     *         required=false,
     *         @OA\Schema(type="integer", default=1)
     *     ),
     *     @OA\Parameter(
     *         name="count",
     *         in="query",
     *         description="Number of items per page",
     *         required=false,
     *         @OA\Schema(type="integer", default=10)
     *     ),
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *          @OA\JsonContent(ref="#/components/schemas/VulnerabilityPagingResource")
     *       )
     * )
     */
    public function getByCompanyWithAssetCount(Request $request)
    {
        $count = $request->input('count', 10);
        $user = $request->user();
        $companyId = $user->company_id;



        $Vulnerability = Vulnerability::whereHas('assets', function ($query) use ($request) {
            $query->where('scan_import_job_id', function ($query) {
                $query->select(DB::raw('MAX(scan_import_job_id)'))->from('asset_vulnerabilities');
            });
        });

        $query = $Vulnerability->select('vulnerabilities.*')
            ->withCount(['assets' => function ($query) use ($companyId) {
                $query->where('scan_import_job_id', function ($query) {
                    $query->select(DB::raw('MAX(scan_import_job_id)'))
                        ->from('asset_vulnerabilities');
                });
                $query->whereHas('system_groups', function ($query) use ($companyId) {
                    $query->where('company_id', $companyId);
                });
            }])
            ->whereHas('assets', function ($query) use ($companyId) {
                $query->whereHas('system_groups', function ($query) use ($companyId) {
                    $query->where('company_id', $companyId);
                });
            })
            ->groupBy('vulnerabilities.id')
            ->havingRaw('count(vulnerabilities.id) > 0');


        $vulnerabilities = $query->paginate($count);

        return VulnerabilityResource::collection($vulnerabilities);
    }

    /**
     * @OA\Get(
     *      path="/api/vulnerabilities/company",
     *      tags={"Vulnerabilities"},
     *      operationId="getByCompany",
     *      security={{"sanctum":{}}},
     *      summary="Get vulerabilities by company",
     *      description="Get vulerabilities by company",
     *     @OA\Parameter(
     *         name="page",
     *         in="query",
     *         description="Page number",
     *         required=false,
     *         @OA\Schema(type="integer", default=1)
     *     ),
     *     @OA\Parameter(
     *         name="count",
     *         in="query",
     *         description="Number of items per page",
     *         required=false,
     *         @OA\Schema(type="integer", default=10)
     *     ),
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *          @OA\JsonContent(ref="#/components/schemas/VulnerabilityPagingResource")
     *       )
     * )
     */
    public function getByCompany(Request $request)
    {
        $count = $request->input('count', 10);
        $user = $request->user();
        $companyId = $user->company_id;
        $query = Vulnerability::select('vulnerabilities.*')

            // Add where condition to get only vulnerabilities where assets count greater than 0
            ->whereHas('assets', function ($query) use ($companyId) {
                $query->whereHas('system_groups', function ($query) use ($companyId) {
                    $query->where('company_id', $companyId);
                });
            })
            ->groupBy('vulnerabilities.id')
            ->havingRaw('count(vulnerabilities.id) > 0');

        $vulnerabilities = $query->paginate($count);

        return VulnerabilityResource::collection($vulnerabilities);
    }



    public function getAssetCount(Request $request)
    {
        $count = $request->input('count', 10);
        $user = $request->user();
        $companyId = $user->company_id;
        $query = Vulnerability::select('vulnerabilities.*')

            // Add where condition to get only vulnerabilities where assets count greater than 0
            ->whereHas('assets', function ($query) use ($companyId) {
                $query->whereHas('system_groups', function ($query) use ($companyId) {
                    $query->where('company_id', $companyId);
                });
            })
            ->groupBy('vulnerabilities.id')
            ->havingRaw('count(vulnerabilities.id) > 0');

        $vulnerabilities = $query->paginate($count);

        return VulnerabilityResource::collection($vulnerabilities);
    }



    /**
     * @OA\Put(
     *      path="/api/vulnerabilities/{id}",
     *      tags={"Vulnerabilities"},
     *      operationId="updateVulnerability",
     *      security={{"sanctum":{}}},
     *      summary="Update Vulnerability information",
     *      description="Returns updated Vulnerability data",
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/VulnerabilityStoreRequest")          
     *         )
     *     ),
     *      @OA\Parameter(
     *          name="id",
     *          description="Vulnerability id",
     *          required=true,
     *          in="path",
     *          @OA\Schema(
     *              type="integer"
     *          )
     *      ),
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *          @OA\JsonContent(ref="#/components/schemas/VulnerabilityResource")
     *       )
     * )
     */
    public function update(VulnerabilityUpdateRequest $request, Vulnerability $vulnerability)
    {
        $vulnerability->update($request->validated());
        return new VulnerabilityResource($vulnerability);
    }

    /**
     * @OA\Delete(
     *      path="/api/vulnerabilities/{id}",
     *      tags={"Vulnerabilities"},
     *      operationId="deleteVulnerability",
     *      security={{"sanctum":{}}},
     *      summary="Delete Vulnerability",
     *      description="Deletes a single Vulnerability",
     *      @OA\Parameter(
     *          name="id",
     *          description="Vulnerability id",
     *          required=true,
     *          in="path",
     *          @OA\Schema(
     *              type="integer"
     *          )
     *      ),
     *      @OA\Response(
     *          response=200,
     *          description="Successful operation",
     *          @OA\JsonContent(ref="#/components/schemas/VulnerabilityResource")
     *       )
     * )
     */
    public function destroy(Vulnerability $vulnerability)
    {
        $vulnerability->delete();
        return new VulnerabilityResource($vulnerability);
    }
}
